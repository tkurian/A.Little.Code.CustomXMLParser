/*******************************************************************************************
*Source File Name: WindowsGUI.java

*Programmer's Name: Tina Kurian, Fred Ulrich, Patrick Szafranko

*Date: March, 29th, 2012

*Class Description: This class manages the user interface for the windows version
********************************************************************************************/

package windows;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import utilities.RssFeed;
import database.Channel;
import database.DBase;
import database.Item;



/*
 * Class Name:		WindowsGUI
 * Description:		This class manages the graphical user interface for the CustomXMLParser. 				
 */
public class WindowsGUI extends JFrame implements ListSelectionListener, ActionListener {
	
	/*
	 * The serialized JFrame extended class needs a serial version UID.
	 * This has been generated by Eclipse.
	 */
	private static final long serialVersionUID = -3501526275889686977L;
	
	
	private JTabbedPane channelPane;
	private JSplitPane rssItemPane;
	private JScrollPane itemDisplayPane;
	private JButton addRssFeedButton;
	private JButton removeRssFeedButton;
	private JList rssFeedList;
	private JList rssItemList;
	private JPanel rssFeedPanel;
	private boolean isItemOpen = false;

	

	/************************************************************************************************
	 * 										STARTUP FUNCTIONS
	************************************************************************************************/
	
	
	
	/*
	 * This is the static method for starting the windows GUI.  It will
	 * create a Runnable class with a run function that will be invoked
	 * later so launching the GUI does not freeze the program.
	 */
	public static void startWindowsGui ( ) { 
		// We are in the static main, set the form to invoke later
		SwingUtilities.invokeLater ( new Runnable ( ) {
            public void run ( ) {
            	// Create a new instance of the WindowsGUI frame
            	WindowsGUI rssWindowsGui = new WindowsGUI ( );
                
                // Make the WindowsGUI frame visible
            	rssWindowsGui.setVisible ( true );
            }
        } );
    }
	
	
	
	/************************************************************************************************
	 * 										INITIALIZATION FUNCTIONS
	************************************************************************************************/
	
	
	
	/**
	 * @Constructor for WindowsGUI
	 */
	public WindowsGUI ( ) {
		// Set the layout to a grid
		setLayout ( new BorderLayout ( 5, 5 ) );
		
		// Set the properties of the window
        setTitle ( "SET RSS Reader" );
        setSize ( 800, 600 );
        setDefaultCloseOperation ( EXIT_ON_CLOSE );
        setBackground ( new Color ( 223, 232, 246 ) );
        
        // Add the components
        addComponents ( );
	}
	
	
	
	/*
	 * Method Name: addComponents
	 * Description: This function will initialize all the components for the
	 * 				GUI component and add them onto the window.
	 * Parameters: no parameters.
	 * Return: N/A
	 */
	private void addComponents ( ) {
		// Create the main and RSS pane
		JSplitPane mainPane = new JSplitPane ( JSplitPane.HORIZONTAL_SPLIT );
		rssItemPane = new JSplitPane ( JSplitPane.VERTICAL_SPLIT );
		
		// Add the channel viewer and the RSS viewer to the RSS pane
		rssItemPane.add ( createChannelTabs ( ), JSplitPane.TOP );
		itemDisplayPane = new JScrollPane ( );
		rssItemPane.add ( itemDisplayPane, JSplitPane.BOTTOM );
		rssItemPane.setBorder ( new EmptyBorder ( 5,5,5,5 ) );
		rssItemPane.setDividerLocation ( 300 );
		
		// Add the feed pane and the RSS panel to the main pane
		mainPane.add ( createRssFeedPanel ( ), JSplitPane.LEFT );
		mainPane.add ( rssItemPane, JSplitPane.RIGHT );
		mainPane.setOneTouchExpandable ( true );

		// Add the main pane to the window
		add ( mainPane, BorderLayout.CENTER );
	}
	
	
	
	/************************************************************************************************
	 * 										RSS FEED LIST CREATION
	************************************************************************************************/
	
	
	/*
	 * Method Name: createRssFeedPanel
	 * Description: This function will created the panel that holds the
	 * 				RSS feed buttons and RSS feed list.
	 * Parameters: no parameters.
	 * Return: JPanel
	 */
	private JPanel createRssFeedPanel ( ) {
		// Create the rssFeedPanel
		rssFeedPanel = new JPanel ( );
		
		// Set the layout to be a box layout
		rssFeedPanel.setLayout ( new BorderLayout ( 5, 5 ) );
		
		// Add the button panel and the feed list to the panel
		rssFeedPanel.add ( createRssFeedButtonPanel ( ), BorderLayout.NORTH );
		rssFeedPanel.add ( createRssFeedList ( ), BorderLayout.CENTER );
		
		// Create a border around the edges of the RSS Feed Panel
		rssFeedPanel.setBorder ( new EmptyBorder ( 5, 5, 5, 5 ) );
		
		// Return the newly created panel
		return rssFeedPanel;
	}
	
	/*
	 * Method Name: createRssFeedButtonPanel
	 * Description: This function will create the panel that holds the
	 * 				list of buttons for adding and removing RSS feeds.
	 * Parameters: no parameters.
	 * Return: JPanel
	 */
	private JPanel createRssFeedButtonPanel ( ) {
		// Create the panel 
		JPanel rssAddButtonPanel = new JPanel ( );
		
		// Create the Add and Remove buttons
		addRssFeedButton = new JButton ( "Add RSS Feed", new ImageIcon ( "images/rss_add.gif" ) );
		removeRssFeedButton = new JButton ( "Remove RSS Feed", new ImageIcon ( "images/rss_delete.gif" ) );
		
		// Add the action listeners
		addRssFeedButton.addActionListener ( this );
		removeRssFeedButton.addActionListener ( this );
		
		// Set the layout of the panel to a BoxLayout that is vertical
		rssAddButtonPanel.setLayout ( new BoxLayout ( rssAddButtonPanel, BoxLayout.LINE_AXIS ) );
		
		// Add the buttons to the panel
		rssAddButtonPanel.add ( addRssFeedButton );
		rssAddButtonPanel.add ( removeRssFeedButton );
		
		// Return the newly created panel
		return rssAddButtonPanel;
	}
	
	/*
	 * Method Name: createRssFeedList
	 * Description: This function will create the list of RSS feeds.  It will hook up
	 * 				a ListSelectionModel to the rssFeedList as well as a RssFeedListCellRenderer
	 * 				for displaying the list.
	 * Parameters: no parameters.
	 * Return: JList
	 */
	private JList createRssFeedList ( ) {
		// Create a JList using the rssFeedListModel
		rssFeedList = new JList ( new RssFeedListModel ( ) );
		
		// Set the cell render to the RssFeedListCellRenderer
		rssFeedList.setCellRenderer ( new RssFeedListCellRenderer ( ) );
		
		// Add the selection listener and set the selection mode to single
		rssFeedList.addListSelectionListener ( this );
		rssFeedList.setSelectionMode ( ListSelectionModel.SINGLE_SELECTION );
		rssFeedList.addMouseListener ( new FeedListListener ( this ) );
		
		// Return the newly created RSS feed list
		return rssFeedList;
	}
	
	
	
	/************************************************************************************************
	 * 										RSS DISPLAY CREATION
	************************************************************************************************/
	
	
	/*
	 * Method Name: createChannelTabs
	 * Description: This function will create a base channel tab
	 * 				that says that there are no current items and no channels.
	 * Parameters: no parameters.
	 * Return: JTabbedPane
	 */
	private JTabbedPane createChannelTabs ( ) {
		// Initialize the channel pane
		channelPane = new JTabbedPane ( );
		
		// Add an empty tab to the channel pane
		channelPane.addTab ( "No Channels", new JLabel ( "Currently there are no items.") );
		
		// Return the created channel pane
		return channelPane;
	}
	
	/*
	 * Method Name: createRssDisplayPanel
	 * Description: This function will create a RSS display panel that displays a
	 * 				RSS item.  It uses an HTML string to display it on an Editor
	 * 				pane and adds it to the scroll pane.
	 * Parameters: Item itemToDisplay.
	 * Return: N/A
	 */
	public void createRssDisplayPanel ( Item itemToDisplay ) {
		// Get the initial divider location
		int dividerLocation = rssItemPane.getDividerLocation ( );
		
		// Create the htmlPane and set the editor pane to not be able to be edited
		JEditorPane htmlPane = new JEditorPane ( "text/html", ItemHtmlDisplay.createItemHtmlString ( itemToDisplay ) );
		htmlPane.setEditable ( false );
		
		// Add a listener to the htmlPane
		htmlPane.addHyperlinkListener ( new HyperlinkListener ( ) {
			public void hyperlinkUpdate ( HyperlinkEvent hev ) {
				if ( hev.getEventType ( ) == HyperlinkEvent.EventType.ACTIVATED ) {
					ItemListListener.launchBrowser ( hev.getURL ( ).toString ( ) );
				}
			}
		});
		
		// Create a scroll pane and ensure it is not horizontally scrollable
		itemDisplayPane = new JScrollPane ( htmlPane );
		itemDisplayPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		
		// Add the scroll pane to the bottom panel
		rssItemPane.add ( itemDisplayPane, JSplitPane.BOTTOM );
		
		// If the item is currently no open, open it half way
		if ( isItemOpen == false ) {
			isItemOpen = true;
			rssItemPane.setDividerLocation ( rssItemPane.getHeight ( ) / 2 );
		}
		// An open item returns the divider back to it's previous location
		else {
			rssItemPane.setDividerLocation ( dividerLocation );
		}
	}
	
	
	/*
	 * Method Name: updateChannelPane
	 * Description: This function will update the channel pane to add any
	 * 				new channels that were clicked on.  It will populate the
	 * 				tab with the list of item elements from the channel.
	 * Parameters: String rssUrl.
	 * Return: N/A
	 */
	private void updateChannelPane ( String rssUrl ) {
		//this.remove(channelPane );
		channelPane.removeAll ( );
		
		// Get the rssFeed database
		DBase rssFeed = DBase.fillRssDbase ( rssUrl );
		
		if ( rssFeed != null ) {
			// Loop through all of the channels
			for ( int x = 0; x < rssFeed.getNumberOfChannels(); x++ ) {
				// Get the current channel on the list
				Channel currentChannel = rssFeed.getChannel ( x );
				
				// Add tabs for each channel
				channelPane.addTab ( currentChannel.getTitle ( ), createItemListScrollPane ( currentChannel ) );
			}
		}
		else {
			// Reset the channel pane
			channelPane.addTab ( "No Channels", new JLabel ( "Bad URL for this RSS feed.") );
		}
		
		// Invalidate the channel pane
		channelPane.invalidate ( );
	}
	
	/*
	 * Method Name: createItemListScrollPane
	 * Description: This function will create a list scroll pane with a set of items
	 *  			in it.  It will add the renderer, model, actionlistener and mouse listener
	 *  			to the pane.
	 * Parameters: Channel listChannel.
	 * Return: JScrollPane
	 */
	private JScrollPane createItemListScrollPane ( Channel listChannel ) {
		rssItemList = new JList ( new RssItemListModel ( listChannel ) );
		
		rssItemList.setCellRenderer ( new RssItemListCellRenderer ( ) );
		rssItemList.addListSelectionListener ( new ItemListListener ( this ) );
		rssItemList.addMouseListener ( ItemListListener.mouseListener );
		
		JScrollPane channelScroll = new JScrollPane ( rssItemList );
		
		return channelScroll;
	}
	
	/*
	 * Method Name: createChannelInfo
	 * Description: This will simply out all of the channel data
	 * 				to the user when requested after a popup menu
	 * 				click.
	 * Return: N/A
	 */
	public void createChannelInfo ( ) {
		// Remove the current tabs
		channelPane.removeAll ( );
		
		// Get the current channel
		Channel currentChannel = ( ( RssItemListModel ) rssItemList.getModel ( ) ).getChannel ( );
		
		// Create an html string for displaying the data
		String htmlDisplay = "<html>";
		if ( currentChannel.getImageUrl ( ) != "" ) {
			htmlDisplay += "<img src='" + currentChannel.getImageUrl ( ) + "'><br>";
		}
		htmlDisplay += "<b>Title: </b>" + currentChannel.getTitle ( ) + "<br>";
		htmlDisplay += "<b>Link: </b>" + currentChannel.getLink ( ) + "<br>";
		htmlDisplay += "<b>Description: </b>" + currentChannel.getDescription ( ) + "<br>";
		htmlDisplay += "<b>Copyright: </b>" + currentChannel.getCopyright ( ) + "<br>";
		htmlDisplay += "<b>Language: </b>" + currentChannel.getLanguage ( ) + "<br>";
		htmlDisplay += "<b>Last Build Date: </b>" + currentChannel.getLastBuildDate ( ) + "<br>";
		htmlDisplay += "<b>Docs: </b>" + currentChannel.getDocs ( ) + "<br>";
		htmlDisplay += "<b>Category: </b>" + currentChannel.getCategory ( ) + "<br>";
		htmlDisplay += "<b>Rating: </b>" + currentChannel.getRating ( ) + "<br>";
		htmlDisplay += "</html>";

		// Add the tab to the channel pane
		channelPane.addTab ( "No Channels", new JLabel ( htmlDisplay ) );
	}
	
	
	
	/************************************************************************************************
	 * 										EVENT HANDLERS
	************************************************************************************************/

	
	/*
	 * Method Name: valueChanged
	 * Description: This function is an action for when a list is clicked.  It will
	 * 				load a new RSS feed and its channels when a Feed is selected in
	 * 				the rssFeedPane.
	 * Parameters: ListSelectionEvent eventArguments.
	 * Return: N/A
	 */
	@Override
	public void valueChanged ( ListSelectionEvent eventArguments ) {
		// Ensure the value is not changing before we get the new channel list
		JList sourceList = ( ( JList ) eventArguments.getSource ( ) );

		if ( !sourceList.isSelectionEmpty ( ) && eventArguments.getValueIsAdjusting ( ) == false ) {
			// Remove the item pane and close the divider
			rssItemPane.remove ( itemDisplayPane );
			rssItemPane.setDividerLocation ( rssItemPane.getHeight ( ) );
			isItemOpen = false;
			
			// Ensure that the selected value is not null
			if ( sourceList.getSelectedValue ( ) != null ) {
				// Update the channel list
				updateChannelPane ( ( ( RssFeed ) sourceList.getSelectedValue ( ) ).getUrl ( ) );
			}
		}
	}


	/*
	 * Method Name: actionPerformed
	 * Description: This is the action event for when buttons are clicked on
	 * 				the RSS feed.  It will add or remove RSS feeds to the 
	 * 				config file.
	 * Parameters: ActionEvent eventArguments.
	 */
	@Override
	public void actionPerformed ( ActionEvent eventArguments ) {
		// Check if the add button was pressed
		if ( eventArguments.getSource ( ) == addRssFeedButton ) {
			// Get the URL from the user
			String url = JOptionPane.showInputDialog ( this, "Please enter the URL of the RSS feed:", 
					"Add RSS Feed", JOptionPane.PLAIN_MESSAGE );
			
			// Get a filled database
			DBase newFeed = DBase.fillRssDbase ( url );
			
			if ( newFeed != null ) {
				// Add a feed into the feed list
				( ( RssFeedListModel ) rssFeedList.getModel ( ) ).addFeed ( 
						new RssFeed ( newFeed.getChannel(0).getTitle(), url, "" ) );
				
				// Select the new feed
				rssFeedList.setSelectedIndex ( ( ( RssFeedListModel ) rssFeedList.getModel ( ) ).getSize ( ) - 1 );
			}
		}
		// Check if the remove button was pressed
		else if ( eventArguments.getSource ( ) == removeRssFeedButton ) {
			
			int rssFeedSelection = rssFeedList.getSelectedIndex();
			
			// Clear the selection on the rssFeedList
			rssFeedList.clearSelection ( );
			
			// Remove an item from the list
			( ( RssFeedListModel ) rssFeedList.getModel ( ) ).removeFeed ( rssFeedSelection );

			// Reset the channel pane
			channelPane.removeAll ( );
			channelPane.addTab ( "No Channels", new JLabel ( "Currently there are no items.") );
			channelPane.invalidate ( );
			rssItemPane.setDividerLocation ( rssItemPane.getHeight ( ) );
		}
		
		// Repaint the screen after updating with the buttons
		repaint ( );
	}
}
